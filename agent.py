import json
from dotenv import load_dotenv
import os
from mistralai import Mistral
import pandas as pd
import time

# Charger les variables d'environnement
load_dotenv('.env')
api_key = os.getenv('MY_API')
agent_id = os.getenv('AGENT_ID')

# Charger le fichier CSV
data = pd.read_csv('csv_modifie.csv')

# Initialiser le client Mistral
client = Mistral(api_key=api_key)

# D√©finir la taille des lots
batch_size = 1  
total_batches = len(data) // batch_size + (1 if len(data) % batch_size > 0 else 0)  # Nombre total de lots

# Fichier JSON o√π stocker les r√©sultats
output_file = "responses.json"

# V√©rifier si le fichier existe d√©j√† et charger les donn√©es existantes
if os.path.exists(output_file):
    with open(output_file, "r", encoding="utf-8") as f:
        try:
            all_responses = json.load(f)
        except json.JSONDecodeError:
            all_responses = []
else:
    all_responses = []

# Compteur pour le timeout
request_count = 0  

# Traitement par lots
for batch_num, i in enumerate(range(0, len(data), batch_size), start=1):
    batch = data.iloc[i:i+batch_size]  # Extraire 1 ligne
    csv_content = batch.to_csv(index=False)  # Convertir en CSV sans index

    # Affichage de l'avancement
    print(f"\nüöÄ Envoi du lot {batch_num}/{total_batches}...")

    # Envoyer √† l'agent Mistral
    chat_response = client.agents.complete(
        agent_id=agent_id,
        messages=[
            {
                "role": "user",
                "content": f"Voici un lot de donn√©es CSV :\n\n{csv_content}"
            },
        ]
    )

    # R√©cup√©rer la r√©ponse
    response_content = chat_response.choices[0].message.content

    try:
        # D√©s√©rialiser la r√©ponse en JSON
        response_json = json.loads(response_content)
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è Erreur : la r√©ponse du lot {batch_num} n'est pas un JSON valide.")
        continue  # Passer au lot suivant

    # Ajouter un ID unique
    response_json["id"] = batch_num  

    # Ajouter la r√©ponse avec ID
    all_responses.append(response_json)

    # Sauvegarde progressive dans un fichier JSON
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(all_responses, f, ensure_ascii=False, indent=4)

    # Affichage imm√©diat du r√©sultat du lot
    print(f"‚úÖ R√©ponse du lot {batch_num} enregistr√©e dans {output_file}")

    # Incr√©menter le compteur de requ√™tes
    request_count += 1  

    # Timeout de 3 secondes toutes les 15 requ√™tes
    if request_count % 1 == 0:
        print("\n‚è≥ Pause de 3 secondes pour √©viter la surcharge de l'API...")
        time.sleep(5)
    
    # Pause normale de 1 seconde entre chaque requ√™te
    time.sleep(1)
